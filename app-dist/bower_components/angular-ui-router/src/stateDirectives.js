function parseStateRef(ref,current){var parsed,preparsed=ref.match(/^\s*({[^}]*})\s*$/);if(preparsed&&(ref=current+"("+preparsed[1]+")"),parsed=ref.replace(/\n/g," ").match(/^([^(]+?)\s*(\((.*)\))?$/),!parsed||4!==parsed.length)throw new Error("Invalid state ref '"+ref+"'");return{state:parsed[1],paramExpr:parsed[3]||null}}function stateContext(el){var stateData=el.parent().inheritedData("$uiView");return stateData&&stateData.state&&stateData.state.name?stateData.state:void 0}function $StateRefDirective($state,$timeout){var allowedOptions=["location","inherit","reload","absolute"];return{restrict:"A",require:["?^uiSrefActive","?^uiSrefActiveEq"],link:function(scope,element,attrs,uiSrefActive){var ref=parseStateRef(attrs.uiSref,$state.current.name),params=null,base=stateContext(element)||$state.$current,hrefKind="[object SVGAnimatedString]"===Object.prototype.toString.call(element.prop("href"))?"xlink:href":"href",newHref=null,isAnchor="A"===element.prop("tagName").toUpperCase(),isForm="FORM"===element[0].nodeName,attr=isForm?"action":hrefKind,nav=!0,options={relative:base,inherit:!0},optionsOverride=scope.$eval(attrs.uiSrefOpts)||{};angular.forEach(allowedOptions,function(option){option in optionsOverride&&(options[option]=optionsOverride[option])});var update=function(newVal){if(newVal&&(params=angular.copy(newVal)),nav){newHref=$state.href(ref.state,params,options);var activeDirective=uiSrefActive[1]||uiSrefActive[0];return activeDirective&&activeDirective.$$addStateInfo(ref.state,params),null===newHref?(nav=!1,!1):void attrs.$set(attr,newHref)}};ref.paramExpr&&(scope.$watch(ref.paramExpr,function(newVal){newVal!==params&&update(newVal)},!0),params=angular.copy(scope.$eval(ref.paramExpr))),update(),isForm||element.bind("click",function(e){var button=e.which||e.button;if(!(button>1||e.ctrlKey||e.metaKey||e.shiftKey||element.attr("target"))){var transition=$timeout(function(){$state.go(ref.state,params,options)});e.preventDefault();var ignorePreventDefaultCount=isAnchor&&!newHref?1:0;e.preventDefault=function(){ignorePreventDefaultCount--<=0&&$timeout.cancel(transition)}}})}}}function $StateRefActiveDirective($state,$stateParams,$interpolate){return{restrict:"A",controller:["$scope","$element","$attrs",function($scope,$element,$attrs){function update(){anyMatch()?$element.addClass(activeClass):$element.removeClass(activeClass)}function anyMatch(){for(var i=0;i<states.length;i++)if(isMatch(states[i].state,states[i].params))return!0;return!1}function isMatch(state,params){return"undefined"!=typeof $attrs.uiSrefActiveEq?$state.is(state.name,params):$state.includes(state.name,params)}var activeClass,states=[];activeClass=$interpolate($attrs.uiSrefActiveEq||$attrs.uiSrefActive||"",!1)($scope),this.$$addStateInfo=function(newState,newParams){var state=$state.get(newState,stateContext($element));states.push({state:state||{name:newState},params:newParams}),update()},$scope.$on("$stateChangeSuccess",update)}]}}$StateRefDirective.$inject=["$state","$timeout"],$StateRefActiveDirective.$inject=["$state","$stateParams","$interpolate"],angular.module("ui.router.state").directive("uiSref",$StateRefDirective).directive("uiSrefActive",$StateRefActiveDirective).directive("uiSrefActiveEq",$StateRefActiveDirective);